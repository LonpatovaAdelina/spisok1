#include <iostream>
#include <fstream>
#include <windows.h>
#include "cgi.h"
#include "list1_func.h"
using namespace std;
void conversion_data(elem*& list, char* str);
void show_content();
void show_menu();
void show_header();
void show_list(elem* list)
{
	elem* curr = list;
	if (!curr) cout << "EMPTY LIST" << endl;
	else while (curr)
	{
		cout << curr->a << (curr->next ? " " : "\n");
		curr = curr->next;
	}
}

void conversion_data(elem*& list, char* str) {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	char* s_copy = new char[strlen(str) + 1];
	strcpy_s(s_copy, strlen(str) + 1, str);
	char* context;
	char* temp = s_copy;
	int i = 0;
	while (char* p = strtok_s(temp, " ", &context)) {
		int m = atoi(p);
		add(list, m);
		i += 1;
		temp = nullptr;
	}

}

void main(){
	cout << "Content-type: text/html; charset=Windows-1251\n\n";
	ifstream f("_index");
	if (f.is_open()) {
		auto sz = 65536;
		auto buf = new char[sz];

		while (!f.eof()) {
			f.getline(buf, sz);
			if (strcmp(buf, "<!--#CONTENT#-->") == 0) {
				show_content();
			}
			else if (!strcmp(buf, "<!--#MENU#-->")) {
				show_menu();
			}
		}
		delete[] buf;
		f.close();
	}
	else {
		cout << "Не удалось вывести страницу :(";
	}
}

void show_menu() {
	ifstream f("menu");
	if (f.is_open()) {
		auto sz = 1024;
		auto buf = new char[sz];
		while (!f.eof()) {
			f.getline(buf, sz);
			char* name;
			char* addrr = strtok_s(buf, " ", &name);
			cout << "<div class='menu-item'>"
				"<a href='" << addrr << "'>" <<
				name << "</a>"
				"</div>";
		}
	}
	f.close();
}
void show_content() {
	auto sz = 65536;
	char* data = nullptr;

	setlocale(LC_ALL, "Rus");

	cout << "<form method='get' action='list1.cgi'>";
	cout << "Ведите данные для записи в список: <input type='text' value='' name='expression' maxlength='50' size='50'><br>";
	cout << "<input type='submit' value='Отправить'>";
	cout << "</form>";

	get_form_data(data);
	if (data && strlen(data) > 0) {
		char* value = nullptr;
		get_param_value(value, "expression", data);
		char* dec_str = new char[sz];
		str_decode(dec_str, value);
		cout << dec_str << "<br>";
		elem* list1 = nullptr;
		conversion_data(list1, dec_str);
		show_list(list1);
		clear(list1);
		delete[] dec_str;
	}
	delete[] data;
}
